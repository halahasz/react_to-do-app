{"version":3,"sources":["layouts/Header.js","components/AddToDo.js","components/ToDoItem.js","components/ToDos.js","views/Home.js","views/About.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","AddToDo","submitFn","onSubmit","type","name","placeholder","value","ToDoItem","this","props","title","id","completed","markFn","delFn","onChange","bind","checked","onClick","Component","ToDos","todos","map","todo","key","url","Home","state","addItem","e","preventDefault","newItem","target","axios","post","then","res","setState","prevState","data","catch","err","console","log","reset","markComplete","handleDel","filter","get","About","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f32696d4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Link } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>TodoList</h1>\r\n      <nav>\r\n        <Link to=\"/\">Home</Link> |&nbsp; <Link to=\"/about\">About</Link>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddToDo = ({ submitFn }) => (\r\n  <form onSubmit={submitFn}>\r\n    <input type=\"text\" name=\"title\" placeholder=\"Add Todo...\" />\r\n    <input type=\"submit\" value=\"Submit\" className=\"btn\" />\r\n  </form>\r\n);\r\n\r\nexport default AddToDo;\r\n\r\nAddToDo.propTypes = {\r\n  submitFn: PropTypes.func.isRequired\r\n}\r\n ","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ToDoItem extends Component {\r\n  render() {\r\n    const { title, id, completed, markFn, delFn } = this.props;\r\n    return (\r\n      <>\r\n        <div className={completed ? \"todo-item is-complete\" : \"todo-item\"}>\r\n          <p>\r\n            <input\r\n              type=\"checkbox\"\r\n              onChange={markFn.bind(this, id)}\r\n              checked={completed}\r\n            />\r\n            <span>{title}</span>\r\n            <button className=\"del\" onClick={() => delFn(id)}>\r\n              x\r\n            </button>\r\n          </p>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoItem;\r\n\r\nToDoItem.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n  completed: PropTypes.bool.isRequired,\r\n  markFn: PropTypes.func.isRequired,\r\n  delFn: PropTypes.func.isRequired\r\n}\r\n","import React from \"react\";\r\nimport ToDoItem from \"./ToDoItem\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ToDos = ({ todos, markFn, delFn }) => {\r\n  return (\r\n    <>\r\n      {todos.map(todo => (\r\n        <ToDoItem key={todo.title} {...todo} markFn={markFn} delFn={delFn} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDos;\r\n\r\nToDos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markFn: PropTypes.func.isRequired,\r\n  delFn: PropTypes.func.isRequired\r\n}","import React, { Component } from \"react\";\r\nimport AddToDo from \"../components/AddToDo\";\r\nimport axios from \"axios\";\r\nimport ToDos from \"../components/ToDos\";\r\n\r\nconst url = \"https://jsonplaceholder.typicode.com/todos\";\r\nclass Home extends Component {\r\n  state = {\r\n    todos: []\r\n  };\r\n  componentDidMount() {\r\n    axios\r\n      .get(`${url}?_limit=5`)\r\n      .then(res => this.setState({ todos: res.data }))\r\n      .catch(err => console.log(err));\r\n  }\r\n  addItem = e => {\r\n    e.preventDefault();\r\n    const newItem = {\r\n      title: e.target[0].value,\r\n      completed: false\r\n    };\r\n    axios\r\n      .post(url, newItem)\r\n      .then(res =>\r\n        this.setState(prevState => ({ todos: [...prevState.todos, res.data] }))\r\n      )\r\n      .catch(err => console.log(err));\r\n    e.target.reset();\r\n  }\r\n\r\n  markComplete = id => {\r\n    this.setState({\r\n      todos: this.state.todos.map(todo => {\r\n        if (todo.id === id) {\r\n          todo.completed = !todo.completed;\r\n        }\r\n        return todo;\r\n      })\r\n    });\r\n  };\r\n\r\n  handleDel = id => {\r\n    this.setState({ todos: this.state.todos.filter(todo => todo.id !== id) });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <AddToDo submitFn={this.addItem} />\r\n        <ToDos\r\n          todos={this.state.todos}\r\n          markFn={this.markComplete}\r\n          delFn={this.handleDel}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\r\n\r\n","import React from \"react\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <div className=\"about\">\r\n      <h1>About</h1>\r\n      <p>\r\n        This is the TodoList app v1.0.0. It is done using React.js, React-router and axios.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Header from \"./layouts/Header\";\nimport Home from \"./views/Home\";\nimport About from \"./views/About\";\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}